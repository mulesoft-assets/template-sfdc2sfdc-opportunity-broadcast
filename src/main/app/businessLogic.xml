<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
	<batch:job name="syncOpportunitiesBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:process-records>
			<batch:step name="foreachOpportunityInAGetOpportunityInBStep">
				<enricher source="#[payload == null ? null : payload.Id]" target="#[payload.Id]"
					doc:name="enrich payload with existing SFDC Opportunity Id">
					<sfdc:query-single config-ref="SalesforceB"
						query="SELECT Id FROM Opportunity WHERE Name = '#[payload.Name]'"
						doc:name="query Opportunity in Salesforce Instance B" />
				</enricher>
			</batch:step>
            <batch:step name="enrichWithAccountInAWhenPush" accept-expression="('syncAccount' == '${account.sync.policy}') &amp;&amp; ('push' == '${trigger.policy}') &amp;&amp; (payload.AccountId != null)">
                <enricher source="#[payload]" target="#[payload.Account]" doc:name="Store in Account">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name,AccountNumber,Description,NumberOfEmployees FROM Account WHERE Id = '#[payload.AccountId]'" doc:name="query Account in  Salesforce Instance A"/>
                </enricher>
            </batch:step>
			 <batch:step name="findOrCreateAccountInBSetp" accept-expression="#['syncAccount' == '${account.sync.policy}' &amp;&amp; payload.Account != null]">
                <enricher source="#[payload == null ? null : payload.Id]" target="#[recordVars.accountInBId]" doc:name="store result in accountInBId">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id FROM Account WHERE Name = '#[payload.Account.Name]'" doc:name="query Account in  Salesforce Instance B"/>
                </enricher>
                <choice doc:name="Choice">
                    <when expression="#[recordVars.accountInB == null]">
                        <enricher doc:name="enrich payload with AccountId" target="#[payload.AccountId]" source="#[payload[0].getId()]">
	                        <processor-chain doc:name="Processor Chain">
                                <dw:transform-message doc:name="Prepare Account data">
                                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[payload.Account
- "Id"
++ ("NumberOfEmployees": payload.Account.NumberOfEmployees as :number {class: "java.lang.Integer"} default 0)
]]]></dw:set-payload>
                                </dw:transform-message>
       		                     <sfdc:create config-ref="SalesforceB" type="Account" doc:name="create Account in Salesforce Instance B">
       	    	                     <sfdc:objects ref="#[payload]"/>
       	        	             </sfdc:create>
	                        </processor-chain>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher target="#[payload.AccountId]" doc:name="enrich payload with AccountId" source="#[payload]">
     	                   <expression-transformer expression="#[recordVars.accountInBId]" doc:name="get existing account id"/>
                        </enricher>
                    </otherwise>
                </choice>
            </batch:step>

			<batch:step name="foreachOpportunityInAUpsertOpportunityInBStep">
				<batch:commit size="200" doc:name="Batch Commit">
                    <dw:transform-message doc:name="Prepare Opportunity data">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
($ - "LastModifiedDate"
 - "Account"
++ ("Amount": $.Amount as :number {class: "java.lang.Double"} default 0)
++ ("CloseDate": $.CloseDate as :date when $.CloseDate != null otherwise null))
}]]></dw:set-payload>
                    </dw:transform-message>
                    <logger message="Opportunities to update/create: #[payload]" level="INFO" doc:name="log Opportunities to update/create"/>
                    <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Opportunity" doc:name="upsert Opportunities in Salesforce Instance B">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="Upsert result: #[payload]" level="INFO" doc:name="log Result"/>
				</batch:commit>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<json:object-to-json-transformer
				doc:name="transform BatchJobInstance to JSON" />
			<logger level="INFO" doc:name="log 'Migration process has finished'"
				message="Migration process has finished: #[payload]" />
		</batch:on-complete>
	</batch:job>
    <flow name="mainFlow" >
        <batch:execute name="syncOpportunitiesBatch" doc:name="syncOpportunitiesBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

</mule>
